PARSER_BEGIN(Lugosi)
import java.io.*;

Class LugosiA{
  ArrayList <Seqcomando> seqcomandos;
  
  LugosiA(ArrayList seqcomandos)
  {this.seqcomandos=seqcomandos;}
  }
  
  class Comando{}

  Class Atrib extends Comando{
    String id;
    Exp exp;

    atrib(String id, Exp exp)
    {
      this.id=id;
      this.exp=exp;
    }
  }
class Print extends Comando{

  Exp exp;
  Print(Exp exp)
  {this.exp = exp;}
}

Class Exp {}

class Num extends Exp{
  int num;

  Num(int num)
  {this.num = num}

}

class Var extends Exp{
  String var;

  Var(String var)
  {this.var = var}
}







public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {
    
 Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
 LugosiA arvore = analisador.Lugosi();
 printf(arvore);
 }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <PVIRG : ";">
| <FCHAVES: "}">
| <ATRIB: ":=">
| <APAREN: "(">
| <FPAREN: ")">
|<PRINT: "print">
|<VIRGULA: ",">
|<tipo_int: "int">
|<tipo_float: "float">
|<tipo_bool: "bool">
|<tipo_void: "void">
|<IF : "if">
|<WHILE: "while">
|<RETURN: "return">
|<DO: "do">
|<FUNCTION: "function">
|<soma: "+">
|<menos: "-">
|<mult: "*">
|<div: "/">
|<and: "&&">
|<ou: "||">
|<menor: "<" >
|<maior: ">" >
|<igual: "==">
|<VAR: "var">
|<falso: "false">
|<verdadeiro: "true">
}

TOKEN :
{
  <NUM : (["0"-"9"])+>
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* (["_"])*>
 
}



// LUGOSI -> MAIN FUNC?

LugosiA Lugosi():
{ArrayList comandos = new ArrayList();}
{
<MAIN>  <ACHAVES>  VARDECL() Seqcomandos() <FCHAVES>
<EOF>
{return new LugosiA(comandos);}
}


// TIPO -> "int" | "bool" |"float" | "void"

void Tipo():
{}
{
 <tipo_int> | <tipo_bool> | <tipo_float> | <tipo_void>

}

//SEQCOMANDOS -> ? SEQCOMANDOS'

void Seqcomandos(ArrayList comandos):{Comando c}
{
  c=? {seqcomandos.add(c);} <PVIRG> Seqcomando2(seqcomandos)

}

//SEQCOMANDOS' -> COMANDO SEQCOMANDOS' | vazio

void Seqcomando2(ArrayList seqcomandos):
{Seqcomando c;}
{
  ( c =? {seqcomandos.add(c);} <PVIRG> Seqcomando2(seqcomandos)) ?

}
//COMANDO -> ID ":=" EXP ";"
//| ID "(" LISTAEXP? ")" ";"
//| "if" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
//| "while" "(" EXP ")" "do" "{" SEQCOMANDOS "}" ";"
//| "do" "{" SEQCOMANDOS "}" "while" "(" EXP ")" ";"
//| "return" EXP ";"
//| "print" "(" EXP ")" ";"


void Comando2() : 
{}
{
   <ATRIB> EXP() <PVIRG> | <APAREN> (LISTAEXP())?  <FPAREN> <PVIRG> 
}

void Comando():
{}
{
<ID> Comando2()
  | <IF> <APAREN> EXP() <FPAREN> <ACHAVES> Seqcomandos() <FCHAVES> <PVIRG>
  | <WHILE> <APAREN> EXP() <FPAREN>   <DO> <ACHAVES> Seqcomandos() <FCHAVES> <PVIRG> 
  | <DO> <ACHAVES> Seqcomandos() <FCHAVES> <WHILE>  <APAREN> EXP() <FPAREN> <PVIRG>
  | <RETURN> EXP() <PVIRG>  
  | <PRINT> <APAREN> EXP()  <FPAREN> <PVIRG>
}

//EXP -> "(" EXP OP EXP ")" | FATOR
void EXP():
{}
{
  <APAREN> EXP() OP() EXP() <FPAREN> | FATOR()

}
//FATOR -> ID FATOR'| TOKEN_num| true | false

void FATOR():
{}
{
  <ID> FATOR2() | <NUM> | <verdadeiro> | <falso>
}

//FATOR' -> "(" LISTAEXP? ")" | ?
void FATOR2():
{}
{
  (<APAREN> ((LISTAEXP())?  <FPAREN> ))?
} 

// OP -> <soma> | <menos> | <mult> | <div> | <and> | <ou> | <menor> | <maior> | <igual>

void OP():
{}
{
  <soma> | <menos> | <mult> | <div> | <and> | <ou> | <menor> | <maior> | <igual>
}

//LISTAEXP -> EXP | LISTAEXP "," EXP

void LISTAEXP():
{}
{
  EXP() LISTAEXP2()  
}
void LISTAEXP2():
{}
{
  (<VIRGULA> EXP())?
}
//FUNC-> "function" TIPO ID "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNK2
void FUNC():
{}
{
  (FUNC2())?
}


//FUNC2 ->  "function" Tipo ID "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" 
void FUNC2(): 
{}
{
  (<FUNCTION> Tipo() <ID> <APAREN> (LISTAARG())? <FPAREN> <ACHAVES> VARDECL() Seqcomandos() <FCHAVES> FUNC())
}

//LISTAARG -> Tipo ID | LISTAARG "," TIPO ID

void LISTAARG():
{}
{
  Tipo() <ID> LISTAARG2()  

}
void LISTAARG2():
{}
{
  (<VIRGULA> Tipo() <ID> ) ?
}
//VARDECL ->  ? (Vardecl2)

void VARDECL():
{}
{
  ( Vardecl2())
}


//VARDECL -> <var> TIPO VARDECL' | ?

void Vardecl2() :
{}
{

  (<VAR> Tipo() <ID>  <PVIRG> Vardecl2()) ?

}
