PARSER_BEGIN(Lugosi)
import java.io.*;
public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {
    
 Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
 analisador.Lugosi();
  }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <PVIRG : ";">
| <FCHAVES: "}">
| <ATRIB: ":=">
| <APAREN: "(">
| <FPAREN: ")">
|<PALRESER: "print">

|<tipo_int: "int">
|<tipo_float: "float">
|<tipo_bool: "bool">
|<tipo_void: "void">

|<soma: "+">
|<menos: "-">
|<mult: "*">
|<div: "/">
|<and: "&&">
|<ou: "||">
|<menor: "<">
|<maior: ">">
|<igual: "==">
|<VARDECL: "var">

|<falso: "false">
|<verdadeiro: "true">

}

TOKEN :
{
  <NUM : (["0"-"9"])+>
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*> 
 
}



// LUGOSI -> MAIN FUNC?

void Lugosi():
{}
{
  Main() (func())*
  <EOF>
}
void Main():
{}
{
<MAIN>  <ACHAVES>  VARDECL() SEQCOMANDOS() <FCHAVES>

}

//VARDECL -> vazio Vardecl2

void VARDECL():
{}
{
  vazio | ( Vardecl2())
}


//VARDECL -> VAR TIPO VARDECL' | VAZIO

void Vardecl2() :
{}
{

 ( var() tipo() Vardecl2())?

}

// TIPO -> "int" | "bool" |"float" | "void"

void Tipo():
{}
{
 <tipo_int> | <tipo_bool> | <tipo_float> | <tipo_void>

}

//SEQCOMANDOS -> VAZIO SEQCOMANDOS'

void Seqcomandos():{}
{
  ?(Seqcomandos2())

}

//SEQCOMANDOS' -> COMANDO SEQCOMANDOS' | VAZIO

Seqcomandos2():
{
  {
    (Comando() Seqcomandos2())?

  }
}

//COMANDO -> TOKEN_id ":=" EXP ";"

Comando() : 
{}
{
    token_id() <ATRIB>  EXP() <PVIRG>
}
//| TOKEN_id "(" LISTAEXP? ")" ";"
//| "if" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
//| "while" "(" EXP ")" "do" "{" SEQCOMANDOS "}" ";"
//| "do" "{" SEQCOMANDOS "}" "while" "(" EXP ")" ";"
//| "return" EXP ";"
//| "print" "(" EXP ")" ";"

TOKEN_ID():
{}
{
  <APAREN> (LISTAEXP())?  <FPAREN> <PVIRG> 
  | if() <APAREN> EXP() <FPAREN> <ACHAVES> SEQCOMANDOS() <FCHAVES> <PVIRG>
  | while() <APAREN> EXP() <FPAREN>   DO() <ACHAVES> SEQCOMANDOS() <FCHAVES> <PVIRG> 
  | DO() <ACHAVES> SEQCOMANDOS() <FCHAVES> while()  <APAREN> EXP() <FPAREN> <PVIRG>
  | RETURN() EXP() <PVIRG>  | PRINT() <APAREN> EXP()  <FPAREN> <PVIRG>
}

//EXP -> "(" EXP OP EXP ")" | FATOR
EXP():
{}
{
  <APAREN> EXP() OP() EXP() <FPAREN> | FATOR()

}
//FATOR -> TOKEN_ID FATOR'| TOKEN_numliteral | true | false

FATOR():
{}
{
  TOKEN_ID() FATOR2() | <TOKEN_numliteral> | <verdadeiro> | <falso>
}

//FATOR' -> "(" LISTAEXP? ")" | VAZIO
FATOR():
{}
{
  <APAREN> (LISTAEXP())?  <FPAREN> | VAZIO
} 

// OP -> <soma> | <menos> | <mult> | <div> | <and> | <ou> | <menor> | <maior> | <igual>

OP():
{}
{
  vazio
}

//LISTAEXP -> EXP | LISTAEXP "," EXP

LISTAEXP():
{}
{
  EXP() | LISTAEXP() <Virgula> EXP()
}

//FUNC-> "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNK2
FUNC():
{}
{
  <function> TIPO() TOKEN_ID() <APAREN> (LISTAARG())? <FPAREN> <ACHAVES> VARDECL() SEQCOMANDOS() <FCHAVES> FUNC2()
}


//FUNC2 ->  "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" | VAZIO
FUNC2():
{}
{
  <function> TIPO() TOKEN_ID() <APAREN> (LISTAARG())? <FPAREN> <ACHAVES> VARDECL() SEQCOMANDOS() <FCHAVES> | VAZIO
}

//LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id

LISTAARG():
{}
{
  TIPO() TOKEN_ID() | LISTAARG()  <Virgula> TIPO() TOKEN_ID()

}



